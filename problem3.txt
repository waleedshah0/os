/*The Sleeping Teaching Assistant
The Sleeping Teaching Assistant A university computer science department has a teaching 
assistant (TA) who helps undergraduate students with their programming assignments during 
regular office hours. The TA's office is rather small and has room for only one desk with a chair 
and computer. There are three chairs in the hallway outside the office where students can sit 
and wait if the TA is currently helping another student. When there are no students who need 
help during office hours, the TA sits at the desk and takes a nap. If a student arrives during 
office hours and finds the TA sleeping, the student must awaken the TA to ask for help. If a 
student arrives and finds the TA currently helping another student, the student sits on one of 
the chairs in the hallway and waits. If no chairs are available, the student will come back at a 
later time. Using POSIX threads, mutex locks, and semaphores, implement a solution that 
coordinates the activities of the TA and the students. Details for this assignment are provided 
below. The Students and the TA
Using Pthreads, begin by creating n students. Each will run as a separate thread. The TA will 
run as a separate thread as well. Student threads will alternate between programming for a 
period of time and seeking help from the TA. If the TA is available, they will obtain help. 
Otherwise, they will either sit in a chair in the hallway or, if no chairs are available, will resume 
programming and will seek help at a later time. If a student arrives and notices that the TA is 
sleeping, the student must notify the TA using a semaphore. When the TA finishes helping a 
student, the TA must check to see if there are students waiting for help in the hallway. If so, the 
TA must help each of these students in turn. If no students are present, the TA may return to 
napping.
*/


#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>

#define NUM_STUDENTS 5
#define NUM_CHAIRS 3

// Semaphores
sem_t ta_sem; // Signals the TA that a student needs help
sem_t student_sem; // Signals a student waiting for the TA to finish
sem_t chair_sem[NUM_CHAIRS]; // Signals availability of a waiting chair

// Mutex lock
pthread_mutex_t ta_mutex; // Protects access to TA state

// Global variables
int ta_available = 1; // 1 if TA is available, 0 otherwise
int num_waiting_students = 0; // Number of students waiting in the hallway

void *student_thread(void *arg) {
    int student_id = *(int *)arg;

    while (1) {
        // Simulate student working on assignment
        printf("Student %d working on assignment\n", student_id);
        sleep(rand() % 5); // Random work time

        // Try to acquire a chair
        if (sem_trywait(&chair_sem[0]) == EAGAIN) {
            printf("Student %d: No chairs available, leaving\n", student_id);
            continue;
        }

        // Acquire the TA mutex
        pthread_mutex_lock(&ta_mutex);

        // Check if TA is available
        if (ta_available) {
            ta_available = 0;
            num_waiting_students++;
            printf("Student %d: Requesting help from TA\n", student_id);
            sem_post(&ta_sem); // Signal the TA
        } else {
            num_waiting_students++;
            printf("Student %d: Joining queue, waiting for TA\n", student_id);
        }

        // Release the TA mutex
        pthread_mutex_unlock(&ta_mutex);

        // Wait for the TA to finish
        sem_wait(&student_sem);

        // Release the chair
        sem_post(&chair_sem[0]);

        // Simulate the TA helping the student
        printf("Student %d: Receiving help from TA\n", student_id);
        sleep(rand() % 3); // Random help time
    }

    pthread_exit(NULL);
}

void *ta_thread(void *arg) {
    while (1) {
        // Wait for a student to signal
        sem_wait(&ta_sem);

        // Acquire the TA mutex
        pthread_mutex_lock(&ta_mutex);

        // Help the first student in the queue
        printf("TA: Helping student %d\n", num_waiting_students);
        num_waiting_students--;
        sem_post(&student_sem); // Signal the helped student

        // Check if any other students are waiting
        if (num_waiting_students > 0) {
            printf("TA: More students waiting\n");
        } else {
            ta_available = 1;
            printf("TA: Going back to sleep\n");
        }

        // Release the TA mutex
        pthread_mutex_unlock(&ta_mutex);
    }

    pthread_exit(NULL);
}

int main() {
    int i;
    pthread_t student_threads[NUM_STUDENTS], ta_thread;
    int student_ids[NUM_STUDENTS];

    // Initialize semaphores
    sem_init(&ta_sem, 0, 0);
    sem_init(&student_sem, 0, 0);
    for (i = 0; i < NUM_CHAIRS; i++) {
        sem_init(&chair_sem[i], 0, 1);
    }

    // Initialize mutex
    pthread_mutex_init(&ta_mutex, NULL);

    // Create student threads
    for (i = 0; i < NUM_STUDENTS; i++) {
        student_ids[i] = i;
        pthread_create(&student_threads[i], NULL, student_thread, &student_ids[i]);
    }

    // Create TA thread
    pthread_create(&ta_thread, NULL, ta_thread, NULL);

    // Join all threads (optional)
    for (i = 0; i < NUM_STUDENTS; i++) {
        pthread_join(student
