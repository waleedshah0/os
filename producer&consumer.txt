#include <pthread.h>
#include <semaphore.h>
#include <stdio.h>

#define BUFFER_SIZE 1  // Single-item buffer for simplicity

sem_t full;        // Tracks whether the buffer is full
sem_t empty;       // Tracks whether the buffer is empty

int buffer[BUFFER_SIZE];

void *producer(void *arg) {
    int item = 10; // Example item to produce

    // Wait for an empty slot
    sem_wait(&empty);

    // Add item to the buffer
    buffer[0] = item;
    printf("Producer produced item %d\n", item);

    // Signal a full slot
    sem_post(&full);

    return NULL;
}

void *consumer(void *arg) {
    int item;

    // Wait for a full slot
    sem_wait(&full);

    // Remove item from the buffer
    item = buffer[0];
    printf("Consumer consumed item %d\n", item);

    // Signal an empty slot
    sem_post(&empty);

    return NULL;
}

int main() {
    pthread_t producer_thread, consumer_thread;

    // Initialize semaphores
    sem_init(&full, 0, 0);
    sem_init(&empty, 0, 1);

    // Create producer and consumer threads
    if (pthread_create(&producer_thread, NULL, producer, NULL) != 0) {
        perror("Failed to create producer thread");
        exit(1);
    }
    if (pthread_create(&consumer_thread, NULL, consumer, NULL) != 0) {
        perror("Failed to create consumer thread");
        exit(1);
    }

    // Wait for threads to finish
    if (pthread_join(producer_thread, NULL) != 0) {
        perror("Failed to join producer thread");
        exit(1);
    }
    if (pthread_join(consumer_thread, NULL) != 0) {
        perror("Failed to join consumer thread");
        exit(1);
    }

    // Destroy semaphores (not strictly necessary here but good practice)
    sem_destroy(&full);
    sem_destroy(&empty);

    return 0;
}