/*
The Dining Philosopher Problem
The Dining Philosopher Problem states that K philosophers seated around a 
circular table with one chopstick between each pair of philosophers. There is one 
chopstick between each philosopher. A philosopher may eat if he can pick up the 
two chopsticks adjacent to him. One chopstick may be picked up by any one of 
its adjacent followers but not both.
The Solution of the Dining Philosophers Problem
The solution to the process synchronization problem is Semaphores, A semaphore is 
an integer used in solving critical sections.
The critical section is a segment of the program that allows you to access the shared 
variables or resources. In a critical section, an atomic action (independently running 
process) is needed, which means that only single process can run in that section at a 
time.
Semaphore has 2 atomic operations: wait() and signal(). If the value of its input S is 
positive, the wait() operation decrements, it is used to acquire resource while entry. 
No operation is done if S is negative or zero. The value of the signal() operation's 
parameter S is increased, it used to release the resource once critical section is 
executed at exit.
*/


#include <stdio.h>
#include <semaphore.h>
#include <pthread.h>

#define NUM_PHILOSOPHERS 5

sem_t chopstick_sem[NUM_PHILOSOPHERS];

void *philosopher(void *arg) {
    int id = *(int *)arg;
    int left_chopstick = id;
    int right_chopstick = (id + 1) % NUM_PHILOSOPHERS;

    while (1) {
        // Thinking
        printf("Philosopher %d is thinking\n", id);
        sleep(rand() % 3);

        // Trying to pick up left chopstick
        sem_wait(&chopstick_sem[left_chopstick]);
        printf("Philosopher %d picked up left chopstick %d\n", id, left_chopstick);

        // Trying to pick up right chopstick
        if (sem_trywait(&chopstick_sem[right_chopstick]) == EAGAIN) {
            // Right chopstick is not available, put back the left chopstick
            sem_post(&chopstick_sem[left_chopstick]);
            printf("Philosopher %d failed to pick up right chopstick %d, putting left chopstick back\n", id, right_chopstick);
            sleep(rand() % 2); // Thinking again for a while
        } else {
            // Right chopstick acquired, eating
            printf("Philosopher %d picked up right chopstick %d, eating\n", id, right_chopstick);
            sleep(rand() % 3); // Eating

            // Putting down chopsticks
            sem_post(&chopstick_sem[right_chopstick]);
            sem_post(&chopstick_sem[left_chopstick]);
            printf("Philosopher %d put down chopsticks %d and %d\n", id, left_chopstick, right_chopstick);
        }
    }

    pthread_exit(NULL);
}

int main() {
    int i;
    pthread_t philosopher_threads[NUM_PHILOSOPHERS];
    int philosopher_ids[NUM_PHILOSOPHERS];

    // Initialize semaphores
    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_init(&chopstick_sem[i], 0, 1);
    }

    // Create philosopher threads
    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        philosopher_ids[i] = i;
        pthread_create(&philosopher_threads[i], NULL, philosopher, &philosopher_ids[i]);
    }

    // Join all threads
    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosopher_threads[i], NULL);
    }

    // Destroy semaphores
    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_destroy(&chopstick_sem[i]);
    }

    return 0;
}
